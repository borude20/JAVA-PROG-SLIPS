Write a Java Program to implement Adapter pattern for Enumeration
iterator.
import java.util.Enumeration;
import java.util.Iterator;
//Enumeration to Iterator Adapter
class EnumerationIteratorAdapter&lt;T&gt; implements Iterator&lt;T&gt; {
private Enumeration&lt;T&gt; enumeration;
public EnumerationIteratorAdapter(Enumeration&lt;T&gt; enumeration) {
this.enumeration = enumeration;
}
@Override
public boolean hasNext() {
return enumeration.hasMoreElements();
}
@Override
public T next() {
return enumeration.nextElement();
}
@Override
public void remove() {
throw new UnsupportedOperationException(&quot;remove() method is not supported by
EnumerationIteratorAdapter&quot;);
}
}

import java.util.Enumeration;
import java.util.Iterator;
public class AdapterPatternExample {

public static void main(String[] args) {
// Create an Enumeration
Enumeration&lt;String&gt; enumeration = new Enumeration&lt;String&gt;() {
private final String[] data = {&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;};
private int currentIndex = 0;
@Override
public boolean hasMoreElements() {
return currentIndex &lt; data.length;
}
@Override
public String nextElement() {
return data[currentIndex++];
}
};
// Create an Iterator using the Adapter
Iterator&lt;String&gt; iterator = new EnumerationIteratorAdapter&lt;&gt;(enumeration);
// Use the Iterator to iterate through elements
while (iterator.hasNext()) {
System.out.println(iterator.next());
}
}
}